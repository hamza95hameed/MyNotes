(TODO)
Dependency injection, Unit testing, Queues, Real-time events, Notifications , Livewire , Inertia.js, Laravel vapor
routes => console.php / channels.php
---
Directory configuration:
Laravel should always be served out of the root of the "web directory" configured for your web server. 
i.e Public in root , other folders out of root attached  with index file
---

Application key : 
Setting application is important. If the application key is not set, your user sessions and other encrypted data will not be secure!

--- 
.env :
Environment file having the environment variables.

if (App::environment('local')) {
    // retrive any variable from environment
}
---

// You may easily access your configuration values using the global config helper function from anywhere in your application.
$value = config('app.timezone');

---
+++++++++++++++++++++++++++
php artisan config:cache
php artisan route:cache
++++++++++++++++++++++++++++
---

Maintenance mode:
When your application is in maintenance mode, a custom view will be displayed for all requests into your application.
---
command : php artisan down
revert mointenance mode : php artisan up

---
Laravel Directory Structure :

Root directory (That are in buit-in installed project )

Many of the classes in the app directory can be generated by Artisan via commands.

The App Directory
The Broadcasting Directory
The Console Directory
The Events Directory
The Exceptions Directory
The Http Directory
The Jobs Directory
The Listeners Directory
The Mail Directory
The Notifications Directory
The Policies Directory
The Providers Directory
The Rules Directory



---
(---ROOT DIRECTORY---) 

Routes:
++ web.php => manage sessions, csrf protection , routing for website
++ api.php => manage stateless part of application , does'nt manage session.
++ console.php => 
This file is where you may define all of your Closure based console
commands. Each Closure is bound to a command instance allowing a
simple approach to interacting with each command's 

E.g:

protected function commands()
{
    // Register a new command `say:hello` using the shorthand
    // syntax. This command will be registered automatically
    // and does not have to be explicitly registered.
    $this->command('say:hello {name}', function($name) {
        $this->info("Hello, {$name}");
    });
}

++ channels.php => 

The channels.php file is where you may register all of the event broadcasting channels that your application supports.


Storage Directory:

storage directory contains your compiled Blade templates, file based sessions, file caches, and other files generated by the framework.
++ app contains files generated by system like images , files , etc
++ frame work have framework generated files
++ logs directory contains your application's log files.


Test directory :
it contain automated test's.

Vendor:
The vendor directory contains your Composer dependencies.
----



(---APP DIRECTORY---) 



-------------
Deployement :

**When deploying your application to production, you should make sure that you run the config:cache Artisan command during your deployment process:

php artisan config:cache

**If you are building a large application with many routes, you should make sure that you are running the route:cache Artisan command during your deployment process:

php artisan route:cache


-----------






----------
The Basics : 

+++++++++++++++++++++++++++++++++++++++++++
1) Routing
+++++++++++++++++++++++++++++++++++++++++++


**) handle multiple request

Route::match(['get', 'post'], '/', function () {
    //
});
 
Route::any('/', function () {
    //
});


**) return view

If your route only needs to return a view, you may use the Route::view method. 
Like the redirect method, this method provides a simple shortcut so that you do not have to define a full route or controller. 
The view method accepts a URI as its first argument and a view name as its second argument.
 In addition, you may provide an array of data to pass to the view as an optional third argument:

Route::view('/welcome', 'welcome');
 
Route::view('/welcome', 'welcome', ['name' => 'Taylor']);

**) Required parameters

Route::get('posts/{post}/comments/{comment}', function ($postId, $commentId) {
    //
})

**) Optional Parameters
Occasionally you may need to specify a route parameter, but make the presence of that route parameter optional. You may do so by placing a ? mark after the parameter name. Make sure to give the route's corresponding variable a default value:

Route::get('user/{name?}', function ($name = null) {
    return $name;
});
 
Route::get('user/{name?}', function ($name = 'John') {
    return $name;
});



**) Regular expression routes

Route::get('user/{name}', function ($name) {
    //
})->where('name', '[A-Za-z]+');
 
Route::get('user/{id}', function ($id) {
    //
})->where('id', '[0-9]+');
 
Route::get('user/{id}/{name}', function ($id, $name) {
    //
})->where(['id' => '[0-9]+', 'name' => '[a-z]+'])



**) Named Routes
Named routes allow the convenient generation of URLs or redirects for specific routes.
You may specify a name for a route by chaining the name method onto the route definition:

Route::get('user/profile', function () {
    //
})->name('profile');


// Generating URLs...
$url = route('profile');
 
// Generating Redirects...
return redirect()->route('profile');


If the named route defines parameters, you may pass the parameters as the second argument to the route function. The given parameters will automatically be inserted into the URL in their correct positions:

Route::get('user/{id}/profile', function ($id) {
    //
})->name('profile');
 
$url = route('profile', ['id' => 1]);


**) Inspect current route

public function handle($request, Closure $next)
{
    if ($request->route()->named('profile')) {
        //
    }
 
    return $next($request);
}


**) Group URL's (namespace  &  prefix)

Route::namespace('Vendor')->group(function () {
Route::prefix('vendor')->group(function () {

//Anything

});
});


//middleware group

Route::middleware(['first', 'second'])->group(function () {

});


** ) Implicit Model Binding :

In this we inject the eloquent instance 

public function getUser(User $user){

	return $user;	
}

**) Explicit Model Binding : 

In this we specify the logic in Route service provider.
So when we hit a route we get the user instance with in.


** )  Fall back route  : When no other route is selected


Route::fallback(function () {
    //
});


**) Get current route details

$route = Route::current();
 
$name = Route::currentRouteName();
 
$action = Route::currentRouteAction();


**) Method spoofing

adding put , patch , delete methid in html form.

    <input type="hidden" name="_method" value="PUT">
    OR
     @method('PUT')


**) Rate limiting in route

// 60 call per 1 min

Route::middleware('auth:api', 'throttle:60,1')->group(function () {
    Route::get('/user', function () {
        //
    });
});


+++++++++++++++++++++++++++++++++++++++++++
2) Middleware
+++++++++++++++++++++++++++++++++++++++++++
 
** ) To create a new middleware, use the make:middleware Artisan command:

php artisan make:middleware CheckAge

If you would like to assign middleware to specific routes, you should first assign the middleware a key in your app/Http/Kernel.php 

Middleware can be define in 2 ways.

1) for every http request / we set it in  protected $middleware 

2) for specific routes (first we define it in kernal than use it in every route file) / we set it in protected $routeMiddleware
 
--
We can set middleware to single route 

Route::get('/', function () {
    //
})->middleware('web');

--
We can set middleware to groups

Route::group(['middleware' => ['web']], function () {
    //
});

--

we can also set priority of middleware in protected $middlewarePriority

+++++++++++++++++++++++++++++++++++++++++++
3) CSRF token
+++++++++++++++++++++++++++++++++++++++++++

Laravel makes it easy to protect your application from cross-site request forgery (CSRF) attacks.
Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user.

--
X-CSRF-TOKEN :
In addition to checking for the CSRF token as a POST parameter,
the VerifyCsrfToken middleware will also check for the X-CSRF-TOKEN request header.
 You could, for example, store the token in an HTML meta tag:

<meta name="csrf-token" content="{{ csrf_token() }}">


+++++++++++++++++++++++++++++++++++++++++++
4) Controller's
+++++++++++++++++++++++++++++++++++++++++++


## single action controller 

php artisan make:controller ShowProfile --invokable

## assigning middleware

   public function __construct()
    {
        $this->middleware('auth');
 
        $this->middleware('log')->only('index');
 
        $this->middleware('subscribed')->except('store');
    }

## resource controller

php artisan make:controller PhotoController --resource

register multiple resource controller 

Route::resources([
    'photos' => 'PhotoController',
    'posts' => 'PostController'
]);


## route model binding

php artisan make:controller PhotoController --resource --model=Photo

## partial resorce controller

Route::resource('photos', 'PhotoController')->only(['index', 'show']);

## api resource controller
// exclude create , edit method which involve html templates
Route::apiResource('photos', 'PhotoController');


## add / except methods in 

Route::resource('photos', 'PhotoController')->only([
    'index', 'show'
]);
 
Route::resource('photos', 'PhotoController')->except([
    'create', 'store', 'update', 'destroy'
]);