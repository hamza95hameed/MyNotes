# custom table
protected $table = 'my_flights';

# custom P_K
protected $primaryKey = 'flight_id';

# if timestamps is not required
public $timestamps = false;

# customize name of timestamps
const CREATED_AT = 'creation_date';
const UPDATED_AT = 'last_update';


# Chunking Result 

Flight::chunk(200, function ($flights) {
    foreach ($flights as $flight) {
        //
    }
});

# Retrive single values

// Retrieve a model by its primary key...
$flight = App\Flight::find(1);
 
// Retrieve the first model matching the query constraints...
$flight = App\Flight::where('active', 1)->first();
 
// Shorthand for retrieving the first model matching the query constraints...
$flight = App\Flight::firstWhere('active', 1);

# Not found exception
$model = App\Flight::findOrFail(1)

# aggregators}
$count = App\Flight::where('active', 1)->count();
 
$max = App\Flight::where('active', 1)->max('price');


# Create / Save a instance

$flight = new Flight;
$flight->name = $request->name;
$flight->save();


# Update instance


$flight = App\Flight::find(1);
$flight->name = 'New Flight Name';
$flight->save();

OR 

( mass Update )

App\Flight::where('active', 1)
->where('destination', 'San Diego')
->update(['delayed' => 1]);


#  isDirty() and isClean()

$user->isDirty(); // false
$user->isClean(); // true

# mass save (use guarded or fillable)

protected $fillable = ['name'];
$flight = App\Flight::create(['name' => 'Flight 10']);

  /**
     * The attributes that aren't mass assignable.
     *
     * @var array
     */
 protected $guarded = ['price'];


 If you would like to make all attributes mass assignable, you may define the $guarded property as an empty array:

/**
 * The attributes that aren't mass assignable.
 *
 * @var array
 */
protected $guarded = [];

## More creation method

firstOrCreate/ firstOrNew
updateOrCreate

# Delete 
$flight = App\Flight::find(1);
$flight->delete();

if pk is known
App\Flight::destroy(1);
 
del by query 
$deletedRows = App\Flight::where('active', 0)->delete(); 


# retrive soft deleted record
$flights = App\Flight::onlyTrashed()
->where('airline_id', 1)
->get();


************************************
Relationships
************************************
1) Use to get related record using eloquent dynamic properties.

[1] one to one 

user -> phone
(hasone)  (belongsto)
---
[2] one to hasmany

.
post ->  comments
(hasMany)  (belongsto)
---
[3] many to many

products -> colors

(belongstomany)   (belongstomany) 


******
Attaching / Detaching
******

// attach
$user = App\User::find(1); 
$user->roles()->attach($roleId);

// Detach a single role from the user...
$user->roles()->detach($roleId);
// Detach all roles from the user...
$user->roles()->detach();


*******************************************
Eager loading
*******************************************
When accessing Eloquent relationships as properties, the relationship data is "lazy loaded". This means the relationship data is not actually loaded until you first access the property. However, Eloquent can "eager load" relationships at the time you query the parent model. Eager loading alleviates the N + 1 query problem. To illustrate the N + 1 query problem, consider a Book model that is related to Author:

<?php
 
namespace App;
 
use Illuminate\Database\Eloquent\Model;
 
class Book extends Model
{
    /**
     * Get the author that wrote the book.
     */
    public function author()
    {
        return $this->belongsTo('App\Author');
    }
}

Now, let's retrieve all books and their authors:

$books = App\Book::all();
 
foreach ($books as $book) {
    echo $book->author->name;
}

This loop will execute 1 query to retrieve all of the books on the table, then another query for each book to retrieve the author. So, if we have 25 books, this loop would run 26 queries: 1 for the original book, and 25 additional queries to retrieve the author of each book.

Thankfully, we can use eager loading to reduce this operation to just 2 queries. When querying, you may specify which relationships should be eager loaded using the with method:

$books = App\Book::with('author')->get();
 
foreach ($books as $book) {
    echo $book->author->name;
}

For this operation, only two queries will be executed:

select * from books
 
select * from authors where id in (1, 2, 3, 4, 5, ...)

##
Eager loading by default
##

add this in modal
protected $with = ['author'];


@@ Their are some built in functions for collections that we can use
## Collection built in functions
$data = Product::all()->makeHidden('price');
$data = Product::all()->only([1, 2, 3]);
return $data;
